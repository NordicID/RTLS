/*
 * File: app/view/DirectionPanel.js
 *
 * This file was generated by Sencha Architect version 4.3.6.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.8.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.8.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RFID_Tag_Locator_Service.view.DirectionPanel', {
    extend: 'Ext.Panel',
    alias: 'widget.directionpanel',

    requires: [
        'RFID_Tag_Locator_Service.view.DirectionPanelViewModel',
        'RFID_Tag_Locator_Service.view.InventoryGrid',
        'Ext.grid.Grid',
        'Ext.grid.column.Date',
        'Ext.grid.column.Number',
        'Ext.grid.column.Check'
    ],

    viewModel: {
        type: 'directionpanel'
    },
    height: '100%',
    hidden: false,
    id: 'searchFields',
    itemId: 'searchFields',
    width: 550,
    docked: 'left',
    margin: '20 50 10 50',
    maxHeight: '100%',
    maxWidth: 550,
    minHeight: '100%',
    minWidth: 550,
    scrollable: true,
    bodyBorder: true,
    header: false,
    title: 'search_map_panel',
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'start'
    },
    items: [
        {
            xtype: 'container',
            height: 570,
            id: 'InOutHbox',
            width: 550,
            maxHeight: 570,
            maxWidth: 550,
            minHeight: 570,
            minWidth: 550,
            layout: 'hbox',
            items: [
                {
                    xtype: 'grid',
                    border: true,
                    height: 550,
                    id: 'TagsInside',
                    shadow: true,
                    style: 'border: 4px solid green;',
                    width: 250,
                    margin: '0 0 10 0',
                    maxHeight: 550,
                    maxWidth: 250,
                    minHeight: 550,
                    minWidth: 250,
                    padding: '',
                    scrollable: 'y',
                    loadingHeight: 550,
                    store: 'DirectionInStore',
                    title: 'IN',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            style: 'color: red !important',
                            width: '100%',
                            scrollable: 'vertical',
                            align: 'center',
                            dataIndex: 'EPC',
                            text: 'EPC'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            style: 'color: red !important',
                            width: 250,
                            align: 'center',
                            dataIndex: 'item',
                            text: 'ITEM'
                        },
                        {
                            xtype: 'datecolumn',
                            hidden: true,
                            width: 125,
                            align: 'center',
                            dataIndex: 'Date_Time',
                            text: 'Date'
                        }
                    ]
                },
                {
                    xtype: 'grid',
                    border: true,
                    height: 550,
                    id: 'TagsOutside',
                    shadow: true,
                    style: 'border: 4px solid red',
                    width: 250,
                    margin: '0 50 10 10',
                    maxHeight: 550,
                    maxWidth: 250,
                    minHeight: 550,
                    minWidth: 250,
                    padding: '',
                    scrollable: 'y',
                    loadingHeight: 550,
                    store: 'DirectionOutStore',
                    title: 'OUT',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            border: true,
                            style: 'color: red !important',
                            width: '100%',
                            scrollable: 'vertical',
                            align: 'center',
                            dataIndex: 'EPC',
                            text: 'EPC'
                        },
                        {
                            xtype: 'gridcolumn',
                            border: true,
                            hidden: true,
                            style: 'color: red !important',
                            width: 250,
                            align: 'center',
                            dataIndex: 'item',
                            text: 'ITEM'
                        },
                        {
                            xtype: 'datecolumn',
                            hidden: true,
                            width: 150,
                            align: 'center',
                            dataIndex: 'Date_Time',
                            text: 'Date'
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'grid',
            border: true,
            height: 550,
            id: 'TagsInOutGrid',
            shadow: true,
            style: 'border: 4px solid blue;',
            width: 510,
            margin: '0 0 10 0',
            maxHeight: 550,
            maxWidth: 510,
            minHeight: 550,
            minWidth: 510,
            padding: '',
            loadingHeight: 550,
            store: 'DirectionInOutStore',
            reserveScrollbar: true,
            title: 'RFID Tags',
            columns: [
                {
                    xtype: 'gridcolumn',
                    shadow: true,
                    style: 'color: red !important',
                    width: 200,
                    align: 'center',
                    dataIndex: 'EPC',
                    text: 'EPC'
                },
                {
                    xtype: 'datecolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'direction',
                    text: 'Location'
                },
                {
                    xtype: 'gridcolumn',
                    style: 'color: red !important',
                    width: 230,
                    align: 'center',
                    dataIndex: 'item',
                    text: 'ITEM'
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'date',
                    text: 'Date'
                }
            ]
        },
        {
            xtype: 'inventorygrid',
            height: 800,
            hidden: true,
            id: 'InventoryFromMqtt',
            itemId: 'InventoryFromMqtt',
            width: 560,
            maxHeight: 800,
            maxWidth: 560,
            minHeight: 800,
            minWidth: 560,
            loadingHeight: 800,
            title: 'Inventory Data from MQTT',
            listeners: {
                refresh: 'onInventoryGridRefresh',
                storechange: 'onInventoryGridStoreChange'
            }
        },
        {
            xtype: 'grid',
            border: true,
            height: 250,
            hidden: true,
            hideMode: 'visibility',
            itemId: 'beamsGrid',
            width: 560,
            margin: '0 0 0 0',
            maxWidth: 560,
            minWidth: 560,
            manageBorders: true,
            store: 'beamsStore',
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 75,
                    maxWidth: 75,
                    minWidth: 75,
                    align: 'center',
                    dataIndex: 'AntennaName',
                    text: 'Beam'
                },
                {
                    xtype: 'numbercolumn',
                    width: 70,
                    minWidth: 70,
                    align: 'center',
                    computedWidth: 70,
                    dataIndex: 'Rssi',
                    defaultWidth: 70,
                    text: 'RSSI'
                },
                {
                    xtype: 'checkcolumn',
                    itemId: 'mycheckcolumn',
                    width: 120,
                    maxWidth: 120,
                    minWidth: 120,
                    userSelectable: true,
                    computedWidth: 120,
                    dataIndex: 'TagDetected',
                    defaultWidth: 120,
                    text: 'Tag Detected',
                    listeners: {
                        checkchange: 'onMycheckcolumnCheckChange'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 300,
                    maxWidth: 300,
                    minWidth: 300,
                    align: 'center',
                    defaultWidth: 300,
                    text: 'EPC'
                }
            ]
        }
    ],

    onInventoryGridRefresh: function(dataview, eOpts) {

    },

    onInventoryGridStoreChange: function(sender, value, oldValue, eOpts) {
        console.log('New Value: ' + value);
        console.log('Old Value: ' + oldValue);
    },

    onMycheckcolumnCheckChange: function(checkcell, rowIndex, checked, record, e, eOpts) {
        // Get antenna name
        // In the MQTT data, each antenna represents the beam area (BFA has 28 beams/antennas)
        var antenna = record.get("AntennaName");

        // Get the BFA UI component where the antenna belongs to:
        var allBeams = checkcell.up().up().up().up().getComponent('searchPanel').getComponent('beam26Sim');

        // Get the beams canvass assigned to this antenna
        var thisBeam;

        //if(antenna == "Beam22") {
        //    thisBeam = allBeams.getSurface('beam22_ui');  //Note:  getSurface method will create NEW surface object if id does not exists
        //    if(checked) {
        //        thisBeam.add ({
        //            type: 'path',
        //            x: 0,
        //            y: 0,
        //            path: 'm142.1776,126.54096c-3.73283,-3.95137 -11.48562,-3.34346 -13.78275,0.6079c-2.29712,3.95137 -9.1885,13.06991 -5.74281,19.14894c3.44569,6.07903 6.31709,10.33435 6.89137,15.50152c0.57428,5.16717 -12.92133,7.29483 -12.0599,14.89362c0.86142,7.59878 10.91134,10.94225 12.0599,19.14894c1.14856,8.20669 -8.90136,13.37386 -8.03994,16.71732c0.86142,3.34346 7.46565,13.37386 6.89137,18.54103c-0.57428,5.16717 -12.0599,10.6383 -12.92133,17.02128c-0.86142,6.38298 -2.00998,12.15805 3.73283,12.46201c5.74281,0.30395 19.8127,0.6079 23.83267,-2.43161c4.01997,-3.03951 11.48562,-2.43161 14.64417,-14.58967c3.15855,-12.15805 -6.89137,-0.6079 -6.89137,-9.42249c0,-8.81459 6.60423,-12.76596 7.7528,-20.36474c1.14856,-7.59878 -5.16853,-7.59878 -5.16853,-13.67781c0,-6.07903 4.30711,-10.6383 3.44569,-16.10942c-0.86142,-5.47112 -8.03994,-1.51976 -8.61422,-5.47112c-0.57428,-3.95137 3.73283,-14.28571 3.73283,-18.23708c0,-3.95137 -6.31709,-10.33435 -7.46565,-14.28571c-1.14856,-3.95137 1.4357,-15.50152 -2.29712,-19.45289z',
        //            strokeStyle: '#333',
        //            fill: '#56aaaa',
        //            opacity: '0.35',
        //            lineWidth: null,
        //        });
        //        thisBeam.renderFrame();
        //        thisBeam.show();
        //    } else {
        //        thisBeam.destroy();
        //    }
        //}

        if(antenna == "Beam22") {
            thisBeam = allBeams.getSurface('beam22');
            if(checked) {
                thisBeam.show();
            } else {
                thisBeam.hide();
            }
        } else if(antenna == "Beam24") {
            thisBeam = allBeams.getSurface('beam24');
            if(checked) {
                thisBeam.show();
            } else {
                thisBeam.hide();
            }
        } else if(antenna == "Beam26") {
            thisBeam = allBeams.getSurface('beam26');
            if(checked) {
                thisBeam.show();
            } else {
                thisBeam.hide();
            }
        } else if(antenna == "Beam28") {
            thisBeam = allBeams.getSurface('beam28');
            if(checked) {
                thisBeam.show();
            } else {
                thisBeam.hide();
            }
        }

        // Hide/Show the beam image if tag is detected by this


    }

});