/*
 * File: app/controller/MqttController.js
 *
 * This file was generated by Sencha Architect version 4.3.6.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.8.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.8.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RFID_Tag_Locator_Service.controller.MqttController', {
    extend: 'Ext.app.Controller',

    id: 'MqttController',

    onLaunch: function(application) {

        // ************   MODEL & STORE OBJECTS  ************

        var inventoryModel 		= application.getModel('InventoryModel');
        var inventoryStore 		= application.getStore('InventoryStore');
        var dirModel 			= application.getModel('DirectionModel');
        var dirInOutModel 		= application.getModel('DirectionInOutModel');

        // Other ways of accessing Store
        // var inventoryStore = Ext.data.StoreManager.lookup('InventoryStore');


        // ************   CONTROLLER  OBJECTS  **************

        var inventoryController = application.getController('MqttController');
        var tagDirectionController = application.getController('TagDirectionController');


        // ************   VIEW OBJECTS  ************

        var inventoryGrid 	= Ext.getCmp('InventoryFromMqtt');
        var directionBar	= Ext.getCmp('directionBar');




        // ************  GUI Components ************

        //var confidenceLevelField = Ext.getCmp('confidenceLevel');



        // ************  GUI Threshold and Counters ************

        // Track change in InventoryStore data before updating the Search Grid UI
        var InventoryStoreChanged 			= false;
        var thresholdInventoryStoreChanged 	= 1;
        var counterInventoryStoreChanged 	= 3;
        var inventoryDataBeforeChange 		= inventoryStore.getCount();

        // Difference between RSSI of two adjacent beams to determine where the tag is more .
        var thresholdRssiOverlapOfBeams 	= 5;

        // Delay updates in determining highest beam to stabilize changes in the strongest quadrant
        var highestBeam 					= 'unknown';
        var counterHighestBeamChanged 		= 0;
        var thresholdHighestBeamChanged 	= 2;

        // Programatically boost/decrease RSSI level of beams to compensate difference to other Beam Quadrants
        // (Instead of setting the Antenna's TxLevel individually which affects other beam's TxLevel)
        var beam24RssiBoost 				= 8;
        var beam28RssiBuck  				= 3;



        // ************   BEAM OBJECTS  ************

        var allBeams 		= Ext.getCmp('beam26Sim');
        var MainBeam 		= allBeams.getSurface('mainSurface');
        var QuadrantBeam 	= allBeams.getSurface('QuadrantSurface');
        var TagLocation 	= allBeams.getSurface('tagSurface');



        // ************   ZONE OBJECTS  ************

        var Zone1ClipPath 	= 'clip-path: path("m448.83791,217.82991c0,0 -224.0312,30.23258 -224.03152,30.23232c0.00032,0.00026 227.1323,28.68246 227.13198,28.68219")';
        var Zone2ClipPath 	= 'clip-path: path("m446.51233,129.45774c0,0 -222.48081,117.05437 -222.48113,117.0541c0.00032,0.00026 224.80672,-28.68193 224.80639,-28.68219")';
        var Zone3ClipPath 	= 'clip-path: path("m365.89211,2.32584c0,0 -148.06214,247.28704 -148.06246,247.28677c0.00032,0.00026 228.68269,-120.93007 228.68237,-120.93034c0.00032,0.00026 -0.77487,-127.13163 -0.77519,-127.13189")';
        var Zone4ClipPath 	= 'clip-path: path("m255.81449,0.77545c0,0 -32.55817,247.28704 -32.55849,247.28677c0.00032,0.00026 141.86091,-248.06197 141.86059,-248.06223")';
        var Zone5ClipPath 	= 'clip-path: path("m255.0393,6.20182l-31.0081,241.08522l-31.00778,-239.53509")';
        var Zone6ClipPath 	= 'clip-path: path("m193.02374,4.65143c0,0 32.55817,244.18626 32.55817,244.18626c0,0 -136.43423,-234.88392 -136.43454,-234.88419")';
        var Zone7ClipPath 	= 'clip-path: path("m84.49651,0.00026c0,0 140.3102,248.83743 140.3102,248.83743c0,0 -230.23276,-124.03112 -229.45788,-124.03138c-0.77488,0.00026 3.87629,-125.58124 4.65117,-124.80631")';
        var Zone8ClipPath 	= 'clip-path: path("m0.77551,129.45774c0,0 224.0312,117.82956 224.0312,117.82956c0,0 -226.35679,-29.45739 -225.58191,-29.45765")';
        var Zone9ClipPath 	= 'clip-path: path("m0.00032,217.05471c0,0 223.25601,29.45739 223.25601,29.45739c0,0 -224.8064,30.23258 -224.03152,30.23232")';
        var Zone10ClipPath 	= 'clip-path: path("m-1.55007,279.07027c224.97857,-35.64178 224.0312,-31.78297 224.0312,-31.78297c0,0 -228.68237,119.37995 -227.90749,119.37968")';
        var Zone11ClipPath 	= 'clip-path: path("m-0.77488,368.21763c224.20338,-124.78914 224.0312,-123.25592 224.0312,-123.25592c0,0 -136.43423,227.90717 -136.43454,227.90691c0.00032,0.00027 -86.82146,-1.55012 -86.82178,-1.55039")';
        var Zone12ClipPath 	= 'clip-path: path("m88.37249,474.41928c135.05601,-230.99079 132.55825,-227.13198 132.55825,-227.13198c0,0 -29.45739,241.86067 -29.45771,241.86041")';
        var Zone13ClipPath 	= 'clip-path: path("m193.02374,486.82239c0,0 28.6822,-239.53509 28.6822,-239.53509c0,0 36.43414,253.48859 36.43382,253.48832")';
        var Zone14ClipPath 	= 'clip-path: path("m255.0393,483.72161l-29.45771,-235.65938l137.98461,233.33353")';
        var Zone15ClipPath 	= 'clip-path: path("m447.28753,370.54322c0,0 -223.25601,-124.03112 -223.25633,-124.03138c0.00032,0.00026 134.10896,227.90744 134.10864,227.90717c0.00032,0.00027 90.69807,-0.77493 90.69775,-0.77519")';
        var Zone16ClipPath 	= 'clip-path: path("m453.48908,371.31841l-231.78347,-126.35696l239.53509,33.33336")';
        var Zone17ClipPath 	= 'clip-path: path("m224.58159,246.92787l96.64775,-11.17346c0.00038,0.00027 1.1177,11.17346 0.55904,13.4081c-0.55866,2.23464 -0.55866,10.05588 -0.55904,10.05561")';
        var Zone18ClipPath 	= 'clip-path: path("m224.70407,245.2925l84.11856,-45.29308c0.58708,0.58733 6.46941,11.17553 8.82235,19.4108c2.35293,8.23527 2.35293,15.88231 2.35293,15.88231c0,0 -88.23504,9.41174 -88.23504,9.41174")';
        var Zone19ClipPath 	= 'clip-path: path("m225.14025,245.25189c0,0 45.8101,-83.2403 45.80972,-83.24057c0.00038,0.00027 16.20151,9.49748 23.46409,16.76006c7.26258,7.26258 15.08381,22.34639 15.08343,22.34612")';
        var Zone20ClipPath 	= 'clip-path: path("m223.4285,243.42849c0,0 11.42857,-94.2857 11.42857,-94.2857c0,0 15.42857,3.78737 18.85714,5.14286c3.42857,1.35548 17.14286,6.85714 17.14286,6.85714c0,0 -47.42857,82.2857 -47.42857,82.2857z")';
        var Zone21ClipPath 	= 'clip-path: path("m223.46427,246.92787c0,0 -11.73185,-97.2068 -11.73223,-97.20706c0.00038,0.00027 7.82162,-0.55839 11.17357,-0.55839c3.35196,0 11.73185,0.55866 11.73147,0.55839")';
        var Zone22ClipPath 	= 'clip-path: path("m223.4587,246.03343l-11.28873,-96.29752c0.17758,0.00093 -15.69548,3.17554 -19.9283,4.76285c-4.23282,1.58731 -16.93127,7.40743 -16.93127,7.40743")';
        var Zone23ClipPath 	= 'clip-path: path("m223.46427,245.25189c0,0 -48.04474,-82.68164 -48.04512,-82.68191c0.00038,0.00027 -18.43539,11.17346 -22.90467,16.2014c-4.46928,5.02794 -14.52515,22.34639 -14.52553,22.34612")';
        var Zone24ClipPath 	= 'clip-path: path("m223.09184,246.92785c0,0 -86.59226,-45.8101 -86.77886,-45.81035c0.1866,0.00025 -5.39999,13.40809 -6.51731,17.87736c-1.11732,4.46928 -2.7933,15.64247 -2.7933,15.64247")';
        var Zone25ClipPath 	= 'clip-path: path("m225.14025,248.04519c0,0 -98.88277,-14.52515 -98.88315,-14.52542c0.00038,0.00027 -1.11694,6.70419 -1.11694,13.4081c0,6.70392 1.67598,14.52515 1.6756,14.52488")';
        var Zone26ClipPath 	= 'clip-path: path("m223.6505,246.92785c0,0 -98.32411,14.52515 -98.32411,14.52515c0,0 3.91062,13.40783 6.14526,16.75979c2.23464,3.35196 7.26258,14.52515 7.26258,14.52515")';
        var Zone27ClipPath 	= 'clip-path: path("m222.90561,246.36921l-84.91666,47.48581c0.00038,0.00027 8.93893,17.31872 13.96687,22.34666c5.02794,5.02794 19.55309,13.96649 19.55271,13.96622")';
        var Zone28ClipPath 	= 'clip-path: path("m223.6505,245.81053c0,0 -51.95535,84.91628 -51.95535,84.91628c0,0 13.40783,6.70392 18.43577,8.3799c5.02794,1.67598 20.11175,5.02794 20.11175,5.02794")';
        var Zone29ClipPath 	= 'clip-path: path("m224.58159,248.04519c0,0 -13.96649,96.64814 -13.96687,96.64786c0.00038,0.00027 8.38028,1.11759 13.96687,1.11759c5.5866,0 13.96649,-1.67598 13.96611,-1.67625")';
        var Zone30ClipPath 	= 'clip-path: path("m224.20916,245.81053c0,0 51.39669,86.0336 51.39669,86.0336c0,0 -12.84917,6.14526 -18.99443,8.3799c-6.14526,2.23464 -18.99443,3.91062 -18.99443,3.91062")';
        var Zone31ClipPath 	= 'clip-path: path("m224.58159,246.36921c0,0 85.47494,48.6034 85.47456,48.60313c0.00038,0.00027 -8.37951,14.52542 -16.20075,22.34666c-7.82124,7.82124 -18.99443,13.40783 -18.99481,13.40756")';
        var Zone32ClipPath 	= 'clip-path: path("m223.09184,245.81053l98.13751,13.40758c0.1866,0.00025 -2.04804,12.84943 -4.28267,18.99468c-2.23464,6.14526 -7.82124,15.64247 -7.82124,15.64247")';



        // ************   QUADRANT BEAMS OBJECTS  ************

        var Q1_ClipPath 	= 'clip-path: path("m82.94612,0.00026c140.48237,243.42823 141.86059,248.06223 141.86059,248.06223c0,0 233.33354,126.3567 233.33321,126.35643c0.00032,0.00027 0.00032,-373.64347 0,-373.64373")';
        var Q2_ClipPath 	= 'clip-path: path("m366.6673,0.77545l-143.4113,248.06197l-227.13198,125.5815l-0.77519,-373.64373")';
        var Q3_ClipPath 	= 'clip-path: path("m0.00032,129.45774c223.42818,113.97075 224.0312,117.05437 224.0312,117.05437c0,0 137.98462,233.33354 137.98429,233.33327c0.00032,0.00027 -362.0155,1.55066 -362.01581,1.55039")';
        var Q4_ClipPath 	= 'clip-path: path("m85.27171,478.29525c0,0 137.98462,-230.23276 137.98462,-230.23276c0,0 237.20951,-127.90709 237.20918,-127.90735c0.00032,0.00026 -4.65084,356.58972 -4.65117,356.58945")';



        // ************   NO BEAMS OBJECTS  ************

        var NoBeams 		= 'clip-path: path("m-1.61973,19.12395l461.61972,-1.12396l0,544.00004l-474.99999,0")';



        // ╠═════ FUNCTION:  Delay a process before execution  ════════════════════════════╣

        var delayCounter 	= 0 ;
        var delayThreshold 	= 5;

        function executeThisProcess() {
            if(delayCounter < delayThreshold) {
                delayCounter ++;
                return false;
            } else {
                delayCounter = 0;
                return true;
            }
        }



        // ╠═════ FUNCTION:  Determine delta of two beams using threshold   ═=════════════╣

        function isBeamDominant(beam1, beam2) {
            var thresholdRssiOverlapOfBeams 	= 5;
        }



        // ╠═════ FUNCTION:  Reset Inventory Grid  ═══════════════════════════════════════╣

        function resetInventoryStoreAndGrid() {
            //inventoryStore.removeAll();
            //inventoryGrid.removeAll();
            //inventoryGrid.refresh();
            //MainBeam.setStyle(NoBeams);
            //QuadrantBeam.setStyle(NoBeams);
            //QuadrantBeam.show();
            //TagLocation.hide();
            MainBeam.hide();
            hideAllDirectionArrows();
        }










        // ╠═════ FUNCTION:  Update Inventory Store  ═════════════════════════════════════╣

        function updateInventoryStore(thisMqttStore, thisRecordCount){
            var thisRecord;
            for (let i = 0; i < thisRecordCount; i++) {
                thisRecord = thisMqttStore.getAt(i);
                addRecordIfNotExists(thisRecord, inventoryStore);
                inventoryGrid.refresh();
            }
        }



        // ╠═════ FUNCTION:  Remove Antenna in Inventory Store  ═════════════════════════╣

        function removeAntennaInInventoryStore(thisEPC, thisBeam){
            console.log('REMOVING DATA FROM  *****  ' + thisEPC + ' **** ' + thisBeam);
            var index = inventoryStore.findBy(function(rec) {
                return rec.get('EPC') === thisEPC && rec.get('AntennaName') === thisBeam;
            });
            if (index !== -1) {
                console.log('DATA INDEX : ' + index);
                console.log('Store data before remove : ' + inventoryStore.getCount());
                var targetRecord = inventoryStore.getAt(index);
                inventoryStore.removeAt(targetRecord);
                inventoryStore.sync();
                inventoryGrid.refresh();
                console.log('Store data after remove : ' + inventoryStore.getCount());
            }
        }



    },

    addMqttStoreToInventoryStore: function(thisMqttStore, thisRecordCount, inventoryGrid, inventoryStore) {
        var thisRecord;
        for (let i = 0; i < thisRecordCount; i++) {
            thisRecord = thisMqttStore.getAt(i);
            this.addOrUpdateRecord(thisRecord, inventoryStore);
        }
        inventoryStore.sort();
        inventoryGrid.refresh();
    },

    resetRssiInInventoryStore: function(thisMqttStore, inventoryGrid, inventoryStore) {
        // 1. Iterate through the Inventory store
        // 2. Tag in Inventory Store which are not detected (not in MQTT Store) must have RSSI = 0.

        var inventoryCount = inventoryStore.getCount();
        var thisMqttTag;
        var thisInventoryRecord;
        var thisInventoryTag;
        for (let i = 0; i < inventoryCount; i++) {
            thisInventoryRecord = inventoryStore.getAt(i);
            thisInventoryTag 	= thisInventoryRecord.get('EPC');
            thisMqttTag 		= thisMqttStore.findRecord('EPC', thisInventoryTag);
            if(!thisMqttTag) {
                thisInventoryRecord.set('ScaledRssi', 0);
            }
        }

        inventoryStore.sort();
        inventoryGrid.refresh();
    },

    addOrUpdateRecord: function(record, targetStore) {
        // Check if the store already has the record
        var oldRssi = 0;
        var index = targetStore.findBy(function(rec) {
            oldRssi = rec.get('ScaledRssi');
            return rec.get('EPC') === record.get('EPC') &&
                rec.get('AntennaName') === record.get('AntennaName');
        });

        // If the record doesn't exist, add it to the store
        if (index === -1) {
            //console.log('Adding Antenna = ' + record.get('AntennaName'));
            targetStore.add(record);
        }
        // If the record exist, update the record in the store
        else {
            //Average the old and new RSSI values before updating
            var averageRssi = (parseInt(oldRssi) + parseInt(record.get('ScaledRssi'))) / 2;
            record.set('ScaledRssi', averageRssi);
            var targetRecord = targetStore.getAt(index);
            targetRecord.set(record.getData());
        }
    },

    removeRecord: function(antennaName, targetStore) {
        targetStore.each(function(record) {
            if (record.get('AntennaName') === antennaName) {
                targetStore.remove(record); // Remove matched record

            }
        });


    },

    connectToMqtt: function() {
        var inventoryModel 			= Ext.getApplication().getModel('InventoryModel');
        var inventoryStore 			= Ext.data.StoreManager.lookup('InventoryStore');
        var inventoryController 	= Ext.getApplication().getController('MqttController');
        var inventoryGrid 			= Ext.getCmp('InventoryFromMqtt');
        var tagDirectionController 	= Ext.getApplication().getController('TagDirectionController');
        var bfaConfigData			= Ext.data.StoreManager.lookup('BfaConfigStore').getAt(0);


        // Network Credentials
        var bfaIpAddress = bfaConfigData.get('IpAddress');
        var connectUrl = 'https://' + bfaIpAddress + ':1885/wsp';
        // const connectUrl = 'https://192.168.0.165:1885/wsp';     	//Arnold
        // const connectUrl = 'https://192.168.160.94:1885/wsp';  	//Salo Grid Test - Industrial
        // const connectUrl = 'https://192.168.160.72:1885/wsp';  	//Salo Grid Test - Gate Detector
        // const connectUrl = 'https://192.168.160.61:1885/wsp';  	//Salo Grid Test - Gate Detector - BFA3

        // BFA Serial Number
        var BFA = bfaConfigData.get('SerialNo');
        // const BFA = 'K223901296';   								//Arnold
        // const BFA = 'N214200067';   								//Salo Grid Test - Industrial
        // const BFA = 'K221400283';   								//Salo Grid Test - Gate Detector  (PW:  NT@03MBU2MB2)
        // const BFA = 'N220600078';   								//Salo Grid Test - Gate Detector - BFA3



        const options = {
            clean: true,
            connectTimeout: 4000,
            resubscribe: true,
            clientId: "ThisIsMyClientID"
        };


        const Beam = {
            TopBeam:		bfaConfigData.get('TopBeam'),
            BottomBeam:		bfaConfigData.get('BottomBeam'),
            TxLevel:		bfaConfigData.get('TxLevel')
        };


        // Programatically clip RSSI data spikes (beyond normal) compared to RSSI of other beams (average = 59)
        var RssiSpikeThreshold 				= 50;
        var RssiClipValue 					= 10; // deduct this much




        // ╠═════ MQTT:  Connect  ═════════════════════════════════════╣

        var client = mqtt.connect(connectUrl, options);



        // ╠═════ MQTT:  Subscribe  ═══════════════════════════════════╣

        // Connect to Inventory Module of RfidEdgeClient application
        var topicInventory = 'RfidEdge/'+ BFA + '/Rfid/Inventory';
        client.subscribe([topicInventory], function (error) {
            if (error) {
                console.log('Subscription failed', error);
                alert('BFA Configurations are not correct.');
            }
            else {
                console.log(`Subscribe to topic '${topicInventory}'`);
                alert('BFA Configurations completed. /n Direction Tracking is now activated.');
            }
        });


        // ╠═════ MQTT:  Publish  ═══════════════════════════════════╣

        var topicPub = 'RfidEdge/'+ BFA + '/ctl';

        // Set the Top and Bottom Beam of the BFA
        var enabledAntenna = '{"Endpoint": "/eventsource/Rfid/settings","Payload": {"Settings": {"EnabledAntennas": ["' + Beam.TopBeam + '","' + Beam.BottomBeam + '"]}}}';
        client.publish(topicPub, enabledAntenna);

        // Set the TxLevel of all antennas
        var TxLevel = '{"Endpoint": "/eventsource/Rfid/settings","Payload": {"Settings": {"DefaultAntennaSettings": {"TxLevel": ' + Beam.TxLevel + '}}}}';
        client.publish(topicPub, TxLevel);



        // ╠═════ MQTT:  Message  ═════════════════════════════════════╣

        client.on('message', function(topicInventory, payload) {
            var message = payload.toString();
            var mqttData = Ext.decode(message);
            var mqttTags = Object.keys(mqttData.Payload.Tags).length;
            var MqttStore = Ext.create('Ext.data.Store', { model: inventoryStore.getModel() });
            var AntennaId = mqttData.Payload.AntennaId;
            var AntennaName = mqttData.Payload.AntennaName;
            var Rssi = 0;


            // Add EPCs in the MQTT Store found by the Antenna
            for (var i = 0; i < mqttTags; i++) {
                var detectedTag = mqttData.Payload.Tags[i].EPC;
                var MqttModel = new inventoryModel();
                delayCounter = 0;
                Rssi = mqttData.Payload.Tags[i].Rssi;
                ScaledRssi = parseInt(mqttData.Payload.Tags[i].ScaledRssi);

                //Apply buck/boost to beams to compensate RSSI
                if(AntennaName === "beam24") {
                    ScaledRssi = ScaledRssi - 0;
                }
                else if (AntennaName === "beam26") {
                    ScaledRssi = ScaledRssi - 0;
                }

                //Clean-up spike data
                if (ScaledRssi > RssiSpikeThreshold) {
                    ScaledRssi = ScaledRssi - RssiClipValue;
                }

                MqttModel.set("EPC", detectedTag);
                MqttModel.set("AntennaId", AntennaId);
                MqttModel.set("AntennaName", AntennaName);
                MqttModel.set("Rssi", Rssi);
                MqttModel.set("ScaledRssi", ScaledRssi);
                MqttStore.add(MqttModel);
                //console.log(detectedTag);
            }


            // Handle the Inventory Store based on MQTT Store data (2 STEPS)

            ////// STEP 1:  Add the MQTT Store to the Inventory Store
            var MqttStoreRecords = MqttStore.getCount();
            //console.log('Records = ' + MqttStoreRecords);
            if (MqttStoreRecords > 0) {
                inventoryController.addMqttStoreToInventoryStore(MqttStore, MqttStoreRecords, inventoryGrid, inventoryStore);
            }

            ////// STEP 2:  Set RSSI to 0 for those tags in the Inventory Store which are not in the MQTT Store.
            inventoryController.resetRssiInInventoryStore(MqttStore, inventoryGrid, inventoryStore);


            // Call this function to start the Direction Tracking (In-Out)
            tagDirectionController.getTagDirection();

        });
    }

});